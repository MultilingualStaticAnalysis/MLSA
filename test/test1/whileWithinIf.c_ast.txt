TranslationUnitDecl 0x31258a0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x3125d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x3125af0 '__int128'
|-TypedefDecl 0x3125df8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x3125b10 'unsigned __int128'
|-TypedefDecl 0x3125e88 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x3125e50 'char *'
|   `-BuiltinType 0x3125930 'char'
|-TypedefDecl 0x3126138 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x31260e0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x3125f60 'struct __va_list_tag'
|     `-Record 0x3125ed8 '__va_list_tag'
`-FunctionDecl 0x31261d8 </home/labaccount/mlsa_new/MLSA/test/test1/whileWithinIf.c:1:1, line:17:1> line:1:5 main 'int ()'
  `-CompoundStmt 0x3189b98 <col:11, line:17:1>
    |-DeclStmt 0x3126350 <line:2:2, col:11>
    | `-VarDecl 0x31262d0 <col:2, col:10> col:6 used x 'int' cinit
    |   `-IntegerLiteral 0x3126330 <col:10> 'int' 5
    |-DeclStmt 0x31263f8 <line:3:2, col:11>
    | `-VarDecl 0x3126378 <col:2, col:10> col:6 used y 'int' cinit
    |   `-IntegerLiteral 0x31263d8 <col:10> 'int' 1
    `-IfStmt 0x3189b68 <line:4:2, line:16:2>
      |-<<<NULL>>>
      |-BinaryOperator 0x3126470 <line:4:6, col:10> 'int' '>'
      | |-ImplicitCastExpr 0x3126458 <col:6> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x3126410 <col:6> 'int' lvalue Var 0x31262d0 'x' 'int'
      | `-IntegerLiteral 0x3126438 <col:10> 'int' 1
      |-CompoundStmt 0x3189aa8 <line:5:2, line:12:2>
      | |-BinaryOperator 0x3126568 <line:6:3, col:9> 'int' '='
      | | |-DeclRefExpr 0x3126498 <col:3> 'int' lvalue Var 0x3126378 'y' 'int'
      | | `-BinaryOperator 0x3126540 <col:7, col:9> 'int' '*'
      | |   |-ImplicitCastExpr 0x3126510 <col:7> 'int' <LValueToRValue>
      | |   | `-DeclRefExpr 0x31264c0 <col:7> 'int' lvalue Var 0x31262d0 'x' 'int'
      | |   `-ImplicitCastExpr 0x3126528 <col:9> 'int' <LValueToRValue>
      | |     `-DeclRefExpr 0x31264e8 <col:9> 'int' lvalue Var 0x3126378 'y' 'int'
      | |-BinaryOperator 0x3189948 <line:7:3, col:11> 'int' '='
      | | |-DeclRefExpr 0x3126590 <col:3> 'int' lvalue Var 0x31262d0 'x' 'int'
      | | `-BinaryOperator 0x3189920 <col:7, col:11> 'int' '-'
      | |   |-ImplicitCastExpr 0x3189908 <col:7> 'int' <LValueToRValue>
      | |   | `-DeclRefExpr 0x31898c0 <col:7> 'int' lvalue Var 0x31262d0 'x' 'int'
      | |   `-IntegerLiteral 0x31898e8 <col:11> 'int' 1
      | `-WhileStmt 0x3189a88 <line:8:3, line:11:3>
      |   |-<<<NULL>>>
      |   |-BinaryOperator 0x31899d0 <line:8:10, col:14> 'int' '<'
      |   | |-ImplicitCastExpr 0x31899b8 <col:10> 'int' <LValueToRValue>
      |   | | `-DeclRefExpr 0x3189970 <col:10> 'int' lvalue Var 0x3126378 'y' 'int'
      |   | `-IntegerLiteral 0x3189998 <col:14> 'int' 4
      |   `-CompoundStmt 0x3189a68 <line:9:3, line:11:3>
      |     `-BinaryOperator 0x3189a40 <line:10:4, col:8> 'int' '='
      |       |-DeclRefExpr 0x31899f8 <col:4> 'int' lvalue Var 0x3126378 'y' 'int'
      |       `-IntegerLiteral 0x3189a20 <col:8> 'int' 11
      `-CompoundStmt 0x3189b48 <line:14:2, line:16:2>
        `-BinaryOperator 0x3189b20 <line:15:3, col:7> 'int' '='
          |-DeclRefExpr 0x3189ad8 <col:3> 'int' lvalue Var 0x31262d0 'x' 'int'
          `-IntegerLiteral 0x3189b00 <col:7> 'int' 1
