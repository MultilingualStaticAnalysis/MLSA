TranslationUnitDecl 0x2c388a0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2c38d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2c38af0 '__int128'
|-TypedefDecl 0x2c38df8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2c38b10 'unsigned __int128'
|-TypedefDecl 0x2c38e88 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2c38e50 'char *'
|   `-BuiltinType 0x2c38930 'char'
|-TypedefDecl 0x2c39138 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x2c390e0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x2c38f60 'struct __va_list_tag'
|     `-Record 0x2c38ed8 '__va_list_tag'
`-FunctionDecl 0x2c391d8 </home/labaccount/mlsa_new/MLSA/test/test1/ifWithinWhile.c:1:1, line:17:1> line:1:5 main 'int ()'
  `-CompoundStmt 0x2c9cb98 <col:11, line:17:1>
    |-DeclStmt 0x2c39350 <line:2:2, col:11>
    | `-VarDecl 0x2c392d0 <col:2, col:10> col:6 used x 'int' cinit
    |   `-IntegerLiteral 0x2c39330 <col:10> 'int' 5
    |-DeclStmt 0x2c393f8 <line:3:2, col:11>
    | `-VarDecl 0x2c39378 <col:2, col:10> col:6 used y 'int' cinit
    |   `-IntegerLiteral 0x2c393d8 <col:10> 'int' 1
    `-WhileStmt 0x2c9cb78 <line:4:2, line:16:2>
      |-<<<NULL>>>
      |-BinaryOperator 0x2c39470 <line:4:9, col:13> 'int' '>'
      | |-ImplicitCastExpr 0x2c39458 <col:9> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x2c39410 <col:9> 'int' lvalue Var 0x2c392d0 'x' 'int'
      | `-IntegerLiteral 0x2c39438 <col:13> 'int' 1
      `-CompoundStmt 0x2c9cb48 <line:5:2, line:16:2>
        |-BinaryOperator 0x2c39568 <line:6:3, col:9> 'int' '='
        | |-DeclRefExpr 0x2c39498 <col:3> 'int' lvalue Var 0x2c39378 'y' 'int'
        | `-BinaryOperator 0x2c39540 <col:7, col:9> 'int' '*'
        |   |-ImplicitCastExpr 0x2c39510 <col:7> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x2c394c0 <col:7> 'int' lvalue Var 0x2c392d0 'x' 'int'
        |   `-ImplicitCastExpr 0x2c39528 <col:9> 'int' <LValueToRValue>
        |     `-DeclRefExpr 0x2c394e8 <col:9> 'int' lvalue Var 0x2c39378 'y' 'int'
        |-BinaryOperator 0x2c9c948 <line:7:3, col:11> 'int' '='
        | |-DeclRefExpr 0x2c39590 <col:3> 'int' lvalue Var 0x2c392d0 'x' 'int'
        | `-BinaryOperator 0x2c9c920 <col:7, col:11> 'int' '-'
        |   |-ImplicitCastExpr 0x2c9c908 <col:7> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x2c9c8c0 <col:7> 'int' lvalue Var 0x2c392d0 'x' 'int'
        |   `-IntegerLiteral 0x2c9c8e8 <col:11> 'int' 1
        `-IfStmt 0x2c9cb18 <line:8:3, line:15:3>
          |-<<<NULL>>>
          |-BinaryOperator 0x2c9c9d0 <line:8:7, col:11> 'int' '>'
          | |-ImplicitCastExpr 0x2c9c9b8 <col:7> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x2c9c970 <col:7> 'int' lvalue Var 0x2c392d0 'x' 'int'
          | `-IntegerLiteral 0x2c9c998 <col:11> 'int' 3
          |-CompoundStmt 0x2c9ca68 <line:9:3, line:11:3>
          | `-BinaryOperator 0x2c9ca40 <line:10:4, col:8> 'int' '='
          |   |-DeclRefExpr 0x2c9c9f8 <col:4> 'int' lvalue Var 0x2c392d0 'x' 'int'
          |   `-IntegerLiteral 0x2c9ca20 <col:8> 'int' 3
          `-CompoundStmt 0x2c9caf8 <line:13:3, line:15:3>
            `-BinaryOperator 0x2c9cad0 <line:14:4, col:8> 'int' '='
              |-DeclRefExpr 0x2c9ca88 <col:4> 'int' lvalue Var 0x2c392d0 'x' 'int'
              `-IntegerLiteral 0x2c9cab0 <col:8> 'int' 2
