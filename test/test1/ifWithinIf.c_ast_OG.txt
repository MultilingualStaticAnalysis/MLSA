TranslationUnitDecl 0x1ce5f30 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1ce6428 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1ce6180 '__int128'
|-TypedefDecl 0x1ce6488 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1ce61a0 'unsigned __int128'
|-TypedefDecl 0x1ce6518 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1ce64e0 'char *'
|   `-BuiltinType 0x1ce5fc0 'char'
|-TypedefDecl 0x1ce67c8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x1ce6770 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x1ce65f0 'struct __va_list_tag'
|     `-Record 0x1ce6568 '__va_list_tag'
`-FunctionDecl 0x1ce6868 </home/labaccount/Saba/bbrepo/mlsa/test/test1/ifWithinIf.c:1:1, line:21:1> line:1:5 main 'int ()'
  `-CompoundStmt 0x1d32408 <col:11, line:21:1>
    |-DeclStmt 0x1ce69e0 <line:2:2, col:11>
    | `-VarDecl 0x1ce6960 <col:2, col:10> col:6 used x 'int' cinit
    |   `-IntegerLiteral 0x1ce69c0 <col:10> 'int' 5
    |-DeclStmt 0x1ce6a88 <line:3:2, col:11>
    | `-VarDecl 0x1ce6a08 <col:2, col:10> col:6 used y 'int' cinit
    |   `-IntegerLiteral 0x1ce6a68 <col:10> 'int' 1
    `-IfStmt 0x1d323d8 <line:4:2, line:20:2>
      |-<<<NULL>>>
      |-BinaryOperator 0x1ce6b00 <line:4:6, col:10> 'int' '>'
      | |-ImplicitCastExpr 0x1ce6ae8 <col:6> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x1ce6aa0 <col:6> 'int' lvalue Var 0x1ce6960 'x' 'int'
      | `-IntegerLiteral 0x1ce6ac8 <col:10> 'int' 1
      |-CompoundStmt 0x1d32318 <line:5:2, line:16:2>
      | |-BinaryOperator 0x1ce6bf8 <line:6:3, col:9> 'int' '='
      | | |-DeclRefExpr 0x1ce6b28 <col:3> 'int' lvalue Var 0x1ce6a08 'y' 'int'
      | | `-BinaryOperator 0x1ce6bd0 <col:7, col:9> 'int' '*'
      | |   |-ImplicitCastExpr 0x1ce6ba0 <col:7> 'int' <LValueToRValue>
      | |   | `-DeclRefExpr 0x1ce6b50 <col:7> 'int' lvalue Var 0x1ce6960 'x' 'int'
      | |   `-ImplicitCastExpr 0x1ce6bb8 <col:9> 'int' <LValueToRValue>
      | |     `-DeclRefExpr 0x1ce6b78 <col:9> 'int' lvalue Var 0x1ce6a08 'y' 'int'
      | |-BinaryOperator 0x1d32118 <line:7:3, col:11> 'int' '='
      | | |-DeclRefExpr 0x1ce6c20 <col:3> 'int' lvalue Var 0x1ce6960 'x' 'int'
      | | `-BinaryOperator 0x1d320f0 <col:7, col:11> 'int' '-'
      | |   |-ImplicitCastExpr 0x1d320d8 <col:7> 'int' <LValueToRValue>
      | |   | `-DeclRefExpr 0x1d32090 <col:7> 'int' lvalue Var 0x1ce6960 'x' 'int'
      | |   `-IntegerLiteral 0x1d320b8 <col:11> 'int' 1
      | `-IfStmt 0x1d322e8 <line:8:3, line:15:3>
      |   |-<<<NULL>>>
      |   |-BinaryOperator 0x1d321a0 <line:8:7, col:11> 'int' '<'
      |   | |-ImplicitCastExpr 0x1d32188 <col:7> 'int' <LValueToRValue>
      |   | | `-DeclRefExpr 0x1d32140 <col:7> 'int' lvalue Var 0x1ce6a08 'y' 'int'
      |   | `-IntegerLiteral 0x1d32168 <col:11> 'int' 4
      |   |-CompoundStmt 0x1d32238 <line:9:3, line:11:3>
      |   | `-BinaryOperator 0x1d32210 <line:10:4, col:8> 'int' '='
      |   |   |-DeclRefExpr 0x1d321c8 <col:4> 'int' lvalue Var 0x1ce6a08 'y' 'int'
      |   |   `-IntegerLiteral 0x1d321f0 <col:8> 'int' 4
      |   `-CompoundStmt 0x1d322c8 <line:13:3, line:15:3>
      |     `-BinaryOperator 0x1d322a0 <line:14:4, col:8> 'int' '='
      |       |-DeclRefExpr 0x1d32258 <col:4> 'int' lvalue Var 0x1ce6a08 'y' 'int'
      |       `-IntegerLiteral 0x1d32280 <col:8> 'int' 3
      `-CompoundStmt 0x1d323b8 <line:18:2, line:20:2>
        `-BinaryOperator 0x1d32390 <line:19:3, col:7> 'int' '='
          |-DeclRefExpr 0x1d32348 <col:3> 'int' lvalue Var 0x1ce6960 'x' 'int'
          `-IntegerLiteral 0x1d32370 <col:7> 'int' 1
