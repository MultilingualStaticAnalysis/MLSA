TranslationUnitDecl 0x33328d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x3332dc8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x3332b20 '__int128'
|-TypedefDecl 0x3332e28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x3332b40 'unsigned __int128'
|-TypedefDecl 0x3332eb8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x3332e80 'char *'
|   `-BuiltinType 0x3332960 'char'
|-TypedefDecl 0x3333168 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x3333110 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x3332f90 'struct __va_list_tag'
|     `-Record 0x3332f08 '__va_list_tag'
`-FunctionDecl 0x3333208 </home/labaccount/mlsa_new/MLSA/test/test1/whileWithinWhile.c:1:1, line:13:1> line:1:5 main 'int ()'
  `-CompoundStmt 0x3396b08 <col:11, line:13:1>
    |-DeclStmt 0x3333380 <line:2:2, col:11>
    | `-VarDecl 0x3333300 <col:2, col:10> col:6 used x 'int' cinit
    |   `-IntegerLiteral 0x3333360 <col:10> 'int' 5
    |-DeclStmt 0x3333428 <line:3:2, col:11>
    | `-VarDecl 0x33333a8 <col:2, col:10> col:6 used y 'int' cinit
    |   `-IntegerLiteral 0x3333408 <col:10> 'int' 1
    `-WhileStmt 0x3396ae8 <line:4:2, line:12:2>
      |-<<<NULL>>>
      |-BinaryOperator 0x33334a0 <line:4:9, col:13> 'int' '>'
      | |-ImplicitCastExpr 0x3333488 <col:9> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x3333440 <col:9> 'int' lvalue Var 0x3333300 'x' 'int'
      | `-IntegerLiteral 0x3333468 <col:13> 'int' 1
      `-CompoundStmt 0x3396ab8 <line:5:2, line:12:2>
        |-BinaryOperator 0x3333598 <line:6:3, col:9> 'int' '='
        | |-DeclRefExpr 0x33334c8 <col:3> 'int' lvalue Var 0x33333a8 'y' 'int'
        | `-BinaryOperator 0x3333570 <col:7, col:9> 'int' '*'
        |   |-ImplicitCastExpr 0x3333540 <col:7> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x33334f0 <col:7> 'int' lvalue Var 0x3333300 'x' 'int'
        |   `-ImplicitCastExpr 0x3333558 <col:9> 'int' <LValueToRValue>
        |     `-DeclRefExpr 0x3333518 <col:9> 'int' lvalue Var 0x33333a8 'y' 'int'
        |-BinaryOperator 0x3396958 <line:7:3, col:11> 'int' '='
        | |-DeclRefExpr 0x33335c0 <col:3> 'int' lvalue Var 0x3333300 'x' 'int'
        | `-BinaryOperator 0x3396930 <col:7, col:11> 'int' '-'
        |   |-ImplicitCastExpr 0x3396918 <col:7> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x33968d0 <col:7> 'int' lvalue Var 0x3333300 'x' 'int'
        |   `-IntegerLiteral 0x33968f8 <col:11> 'int' 1
        `-WhileStmt 0x3396a98 <line:8:3, line:11:3>
          |-<<<NULL>>>
          |-BinaryOperator 0x33969e0 <line:8:10, col:14> 'int' '>'
          | |-ImplicitCastExpr 0x33969c8 <col:10> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x3396980 <col:10> 'int' lvalue Var 0x33333a8 'y' 'int'
          | `-IntegerLiteral 0x33969a8 <col:14> 'int' 0
          `-CompoundStmt 0x3396a78 <line:9:3, line:11:3>
            `-BinaryOperator 0x3396a50 <line:10:4, col:8> 'int' '='
              |-DeclRefExpr 0x3396a08 <col:4> 'int' lvalue Var 0x33333a8 'y' 'int'
              `-IntegerLiteral 0x3396a30 <col:8> 'int' 11
