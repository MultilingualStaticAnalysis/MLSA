TranslationUnitDecl 0x1e5ef30 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1e5f428 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1e5f180 '__int128'
|-TypedefDecl 0x1e5f488 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1e5f1a0 'unsigned __int128'
|-TypedefDecl 0x1e5f518 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1e5f4e0 'char *'
|   `-BuiltinType 0x1e5efc0 'char'
|-TypedefDecl 0x1e5f7c8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x1e5f770 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x1e5f5f0 'struct __va_list_tag'
|     `-Record 0x1e5f568 '__va_list_tag'
`-FunctionDecl 0x1e5f868 </home/labaccount/Saba/bbrepo/mlsa/test/test1/whileWithinIf.c:1:1, line:17:1> line:1:5 main 'int ()'
  `-CompoundStmt 0x1eab358 <col:11, line:17:1>
    |-DeclStmt 0x1e5f9e0 <line:2:2, col:11>
    | `-VarDecl 0x1e5f960 <col:2, col:10> col:6 used x 'int' cinit
    |   `-IntegerLiteral 0x1e5f9c0 <col:10> 'int' 5
    |-DeclStmt 0x1e5fa88 <line:3:2, col:11>
    | `-VarDecl 0x1e5fa08 <col:2, col:10> col:6 used y 'int' cinit
    |   `-IntegerLiteral 0x1e5fa68 <col:10> 'int' 1
    `-IfStmt 0x1eab328 <line:4:2, line:16:2>
      |-<<<NULL>>>
      |-BinaryOperator 0x1e5fb00 <line:4:6, col:10> 'int' '>'
      | |-ImplicitCastExpr 0x1e5fae8 <col:6> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x1e5faa0 <col:6> 'int' lvalue Var 0x1e5f960 'x' 'int'
      | `-IntegerLiteral 0x1e5fac8 <col:10> 'int' 1
      |-CompoundStmt 0x1eab268 <line:5:2, line:12:2>
      | |-BinaryOperator 0x1e5fbf8 <line:6:3, col:9> 'int' '='
      | | |-DeclRefExpr 0x1e5fb28 <col:3> 'int' lvalue Var 0x1e5fa08 'y' 'int'
      | | `-BinaryOperator 0x1e5fbd0 <col:7, col:9> 'int' '*'
      | |   |-ImplicitCastExpr 0x1e5fba0 <col:7> 'int' <LValueToRValue>
      | |   | `-DeclRefExpr 0x1e5fb50 <col:7> 'int' lvalue Var 0x1e5f960 'x' 'int'
      | |   `-ImplicitCastExpr 0x1e5fbb8 <col:9> 'int' <LValueToRValue>
      | |     `-DeclRefExpr 0x1e5fb78 <col:9> 'int' lvalue Var 0x1e5fa08 'y' 'int'
      | |-BinaryOperator 0x1eab108 <line:7:3, col:11> 'int' '='
      | | |-DeclRefExpr 0x1e5fc20 <col:3> 'int' lvalue Var 0x1e5f960 'x' 'int'
      | | `-BinaryOperator 0x1eab0e0 <col:7, col:11> 'int' '-'
      | |   |-ImplicitCastExpr 0x1eab0c8 <col:7> 'int' <LValueToRValue>
      | |   | `-DeclRefExpr 0x1eab080 <col:7> 'int' lvalue Var 0x1e5f960 'x' 'int'
      | |   `-IntegerLiteral 0x1eab0a8 <col:11> 'int' 1
      | `-WhileStmt 0x1eab248 <line:8:3, line:11:3>
      |   |-<<<NULL>>>
      |   |-BinaryOperator 0x1eab190 <line:8:10, col:14> 'int' '<'
      |   | |-ImplicitCastExpr 0x1eab178 <col:10> 'int' <LValueToRValue>
      |   | | `-DeclRefExpr 0x1eab130 <col:10> 'int' lvalue Var 0x1e5fa08 'y' 'int'
      |   | `-IntegerLiteral 0x1eab158 <col:14> 'int' 4
      |   `-CompoundStmt 0x1eab228 <line:9:3, line:11:3>
      |     `-BinaryOperator 0x1eab200 <line:10:4, col:8> 'int' '='
      |       |-DeclRefExpr 0x1eab1b8 <col:4> 'int' lvalue Var 0x1e5fa08 'y' 'int'
      |       `-IntegerLiteral 0x1eab1e0 <col:8> 'int' 11
      `-CompoundStmt 0x1eab308 <line:14:2, line:16:2>
        `-BinaryOperator 0x1eab2e0 <line:15:3, col:7> 'int' '='
          |-DeclRefExpr 0x1eab298 <col:3> 'int' lvalue Var 0x1e5f960 'x' 'int'
          `-IntegerLiteral 0x1eab2c0 <col:7> 'int' 1
