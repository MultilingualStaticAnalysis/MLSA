TranslationUnitDecl 0x2fc48a0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2fc4d98 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2fc4af0 '__int128'
|-TypedefDecl 0x2fc4df8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2fc4b10 'unsigned __int128'
|-TypedefDecl 0x2fc4e88 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2fc4e50 'char *'
|   `-BuiltinType 0x2fc4930 'char'
|-TypedefDecl 0x2fc5138 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x2fc50e0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x2fc4f60 'struct __va_list_tag'
|     `-Record 0x2fc4ed8 '__va_list_tag'
`-FunctionDecl 0x2fc51d8 </home/labaccount/mlsa_new/MLSA/test/test1/ifWithinIf.c:1:1, line:21:1> line:1:5 main 'int ()'
  `-CompoundStmt 0x3028c38 <col:11, line:21:1>
    |-DeclStmt 0x2fc5350 <line:2:2, col:11>
    | `-VarDecl 0x2fc52d0 <col:2, col:10> col:6 used x 'int' cinit
    |   `-IntegerLiteral 0x2fc5330 <col:10> 'int' 5
    |-DeclStmt 0x2fc53f8 <line:3:2, col:11>
    | `-VarDecl 0x2fc5378 <col:2, col:10> col:6 used y 'int' cinit
    |   `-IntegerLiteral 0x2fc53d8 <col:10> 'int' 1
    `-IfStmt 0x3028c08 <line:4:2, line:20:2>
      |-<<<NULL>>>
      |-BinaryOperator 0x2fc5470 <line:4:6, col:10> 'int' '>'
      | |-ImplicitCastExpr 0x2fc5458 <col:6> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x2fc5410 <col:6> 'int' lvalue Var 0x2fc52d0 'x' 'int'
      | `-IntegerLiteral 0x2fc5438 <col:10> 'int' 1
      |-CompoundStmt 0x3028b48 <line:5:2, line:16:2>
      | |-BinaryOperator 0x2fc5568 <line:6:3, col:9> 'int' '='
      | | |-DeclRefExpr 0x2fc5498 <col:3> 'int' lvalue Var 0x2fc5378 'y' 'int'
      | | `-BinaryOperator 0x2fc5540 <col:7, col:9> 'int' '*'
      | |   |-ImplicitCastExpr 0x2fc5510 <col:7> 'int' <LValueToRValue>
      | |   | `-DeclRefExpr 0x2fc54c0 <col:7> 'int' lvalue Var 0x2fc52d0 'x' 'int'
      | |   `-ImplicitCastExpr 0x2fc5528 <col:9> 'int' <LValueToRValue>
      | |     `-DeclRefExpr 0x2fc54e8 <col:9> 'int' lvalue Var 0x2fc5378 'y' 'int'
      | |-BinaryOperator 0x3028948 <line:7:3, col:11> 'int' '='
      | | |-DeclRefExpr 0x2fc5590 <col:3> 'int' lvalue Var 0x2fc52d0 'x' 'int'
      | | `-BinaryOperator 0x3028920 <col:7, col:11> 'int' '-'
      | |   |-ImplicitCastExpr 0x3028908 <col:7> 'int' <LValueToRValue>
      | |   | `-DeclRefExpr 0x30288c0 <col:7> 'int' lvalue Var 0x2fc52d0 'x' 'int'
      | |   `-IntegerLiteral 0x30288e8 <col:11> 'int' 1
      | `-IfStmt 0x3028b18 <line:8:3, line:15:3>
      |   |-<<<NULL>>>
      |   |-BinaryOperator 0x30289d0 <line:8:7, col:11> 'int' '<'
      |   | |-ImplicitCastExpr 0x30289b8 <col:7> 'int' <LValueToRValue>
      |   | | `-DeclRefExpr 0x3028970 <col:7> 'int' lvalue Var 0x2fc5378 'y' 'int'
      |   | `-IntegerLiteral 0x3028998 <col:11> 'int' 4
      |   |-CompoundStmt 0x3028a68 <line:9:3, line:11:3>
      |   | `-BinaryOperator 0x3028a40 <line:10:4, col:8> 'int' '='
      |   |   |-DeclRefExpr 0x30289f8 <col:4> 'int' lvalue Var 0x2fc5378 'y' 'int'
      |   |   `-IntegerLiteral 0x3028a20 <col:8> 'int' 4
      |   `-CompoundStmt 0x3028af8 <line:13:3, line:15:3>
      |     `-BinaryOperator 0x3028ad0 <line:14:4, col:8> 'int' '='
      |       |-DeclRefExpr 0x3028a88 <col:4> 'int' lvalue Var 0x2fc5378 'y' 'int'
      |       `-IntegerLiteral 0x3028ab0 <col:8> 'int' 3
      `-CompoundStmt 0x3028be8 <line:18:2, line:20:2>
        `-BinaryOperator 0x3028bc0 <line:19:3, col:7> 'int' '='
          |-DeclRefExpr 0x3028b78 <col:3> 'int' lvalue Var 0x2fc52d0 'x' 'int'
          `-IntegerLiteral 0x3028ba0 <col:7> 'int' 1
