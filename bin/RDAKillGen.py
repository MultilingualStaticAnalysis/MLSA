#!/usr/bin/env python
# MLSA Multilingual Software Analysis
# This program is part of the MLSA package under development at Fordham University Department of Computer and Information Science.
# <This program calls CAssignment Collector and extracts kill/gen information from the list that is produced>
# Author: <Sunand Raghupathi>
# Date: <6/20/17>
# This code can be copied or used and is without warrenty or support, but this header needs to be coppied along with the program FU2017
# Input: <the abstract syntax tree (.txt) generated by Clang>
# Output: A python list of the form: <lineNumber, (Scope), {Kill list, Gen list}>

#Definitions of Kill and Gen for a given line number (only ones in which assignments take place):
	#Kill is given by the name of a variable (for example, 'x') along with every value that the variable ('x') is assigned
	# in the scope that the line number belongs to
	
	#Gen is given by the name of the variable along with the value that the variable is assigned at the given line number

import sys
import csv

def prettyPrint(list):
	for index in list:
		print index
		print ''




def getAssignmentList(varsFile):
	error = "MLSA: RDAKillGen "


	assignmentList = []
	subList = []
	try:
		with open(varsFile, 'r') as f:

			csv_f = csv.reader(f)

			for line in csv_f:
				#lineNumber = line[0]
				uniqueID = line[0]
				varName = line[1]
				#get scope:
				scopeString = line[2]

				
				scopeString = scopeString.strip('"')
				scopeString = scopeString.strip('(')
				scopeString = scopeString.strip(')')
				scopeString = scopeString.strip(',')
				scopeString = scopeString.strip("'")
				scopeString = scopeString.strip("'")
				scopeList = scopeString.split(',')
				startLine = (scopeList[0].strip("'"))
				endLine = (scopeList[1].strip(' ').strip("'"))


				if len(scopeList) > 2:
					funcAddress = scopeList[2].strip(' ').strip("'")
				else:
					funcAddress = '-1'


			

				scope = (startLine, endLine, funcAddress)



				#get value
				varValue = line[3]
				subList = [uniqueID, varName, scope, varValue]
				assignmentList.append(subList)



	except Exception:
		sys.exit(error + "file " + '"' + varsFile + '"' + " not found")
	return assignmentList



def KillGen(inputList):
	error = "MLSA: CAssignmentCollector "

	#prettyPrint(inputList)
	#inputList has the form:
	#[[line #, varName, (scope), varValue], ...]

	Final = []
	 
	lineNumber = ''
	uniqueID = ''
	name = ''
	address = ''
	uniqueID = ''
	value = ''


	for element in inputList:
		Kill = []

		subKill1 = ()
		subKill2 = ()

		if len(element) < 4:
			sys.exit(error + "input list is of the wrong format")

				
		#lineNumber = element[0]
		uniqueID = element[0]
		name = element[1]
		#address = element[2]
		scope = element[2]
		#uniqueID = (name, address)
		value = element[3]

		subKill1 = (name, '?')
		Kill.append(subKill1)

		for index in inputList:
			if len(index) < 4:
				sys.exit(error + "input list is of the wrong format")


			if (index[1] == name and (index[2] == scope or scope[1] == '-1') ):
				#For line numbers
				#subKill2 = (name, index[0])

				#for values
				nVal = index[3]
				subKill2 = (index[1], nVal)
				
				Kill.append(subKill2)
		
		#For line numbers in solution
		#Gen = (name, lineNumber)

		#For values
		Gen = (name, value)



		subList = [uniqueID, scope, {'Kill': Kill, 'Gen' : Gen}]

		Final.append(subList)

	return Final
	
#prettyPrint(KillGen("test.c_ast.txt"))

def main(varsFile):
	assignmentList = getAssignmentList(varsFile)
	killGenList = KillGen(assignmentList)
	#prettyPrint(killGenList)
	return killGenList

#main('test.c_vars.csv')

